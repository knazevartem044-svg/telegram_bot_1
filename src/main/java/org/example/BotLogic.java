package org.example;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–º –æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ç—É —Å –µ–≥–æ –æ—Ç–≤–µ—Ç–∞–º–∏.
 */
public class BotLogic {

    /** –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —à–∞–≥–æ–≤ –¥–∏–∞–ª–æ–≥–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–Ω–∫–µ—Ç—ã. */
    private enum Step { WHO, OCCASION, AGE, INTERESTS, BUDGET, DONE }

    /**
     * –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
     */
    private final class Session {
        /** –¢–µ–∫—É—â–∏–π —à–∞–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. */
        Step step = Step.WHO;

        /** –ö–æ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–¥–∞—Ä–æ–∫. */
        String who;

        /** –ü–æ–≤–æ–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞. */
        String occasion;

        /** –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞. */
        String age;

        /** –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è. */
        String interests;

        /** –ë—é–¥–∂–µ—Ç, –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫. */
        String budget;
    }

    /** –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ chatId. */
    private final Map<Long, Session> sessions = new HashMap<>();



    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Ö–æ–¥—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—è –∫–æ–º–∞–Ω–¥—ã.
     */
    public Response handle(long chatId, String messageText) {

        String raw = messageText.trim();
        String msg = raw.toLowerCase(Locale.ROOT);

        switch (msg) {
            case "/start": {
                Session session = new Session();
                sessions.put(chatId, session);

                String intro = String.join("\n",
                        "–ü—Ä–∏–≤–µ—Ç!",
                        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤—Å–µ–≥–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.",
                        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–∫–∞–∂–∏, –∫–æ–º—É –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫?"
                );

                return new Response(chatId, intro);
            }
            case "/reset": {
                sessions.remove(chatId);
                sessions.put(chatId, new Session());
                return new Response(chatId, "–ê–Ω–∫–µ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ö–æ–º—É –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫?");
            }
            case "/summary": {
                Session s = sessions.get(chatId);
                if (s == null)
                    return new Response(chatId, "–ê–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞. –ù–∞–±–µ—Ä–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.");
                return new Response(chatId, "–ê–Ω–∫–µ—Ç–∞: \n" + humanSummary(s));
            }
            case "/help": {
                String helpText = String.join("\n",
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                        "/start ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞",
                        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É",
                        "/summary ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
                );
                return new Response(chatId, helpText);
            }
            case "/ideas": {
                Session s = sessions.get(chatId);
                if (s == null || s.step != Step.DONE) {
                    return new Response(chatId, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.");
                }

                String prompt = String.format(
                        "–ü–æ–¥–±–µ—Ä–∏ 3-5 –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:\n" +
                                "–ö–æ–º—É: %s\n" +
                                "–ü–æ–≤–æ–¥: %s\n" +
                                "–í–æ–∑—Ä–∞—Å—Ç: %s\n" +
                                "–ò–Ω—Ç–µ—Ä–µ—Å—ã: %s\n" +
                                "–ë—é–¥–∂–µ—Ç: %s —Ä—É–±–ª–µ–π.\n" +
                                "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –ø–æ –ø—É–Ω–∫—Ç–∞–º, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —Å —ç–º–æ–¥–∑–∏ üéÅ.",
                        s.who, s.occasion, s.age, s.interests, s.budget
                );

                GiftIdeaService ai = new GiftIdeaService();
                try {
                    String ideas = ai.fetchGiftIdeas(prompt);
                    return new Response(chatId, ideas);
                } catch (Exception e) {
                    e.printStackTrace();
                    return new Response(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.");
                }
            }

            default:
        }
        Session s = sessions.get(chatId);
        if (s == null) {
            return new Response(chatId,
                    "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å\n" +
                            "–ù–∞–±–µ—Ä–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞, –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }

        switch (s.step) {
            case WHO:
                s.who = raw;
                s.step = Step.OCCASION;
                return new Response(chatId, "–ü–æ–≤–æ–¥?");
            case OCCASION:
                s.occasion = raw;
                s.step = Step.AGE;
                return new Response(chatId, "–í–æ–∑—Ä–∞—Å—Ç?");
            case AGE:
                s.age = raw;
                s.step = Step.INTERESTS;
                return new Response(chatId, "–ò–Ω—Ç–µ—Ä–µ—Å—ã?");
            case INTERESTS:
                s.interests = raw;
                s.step = Step.BUDGET;
                return new Response(chatId, "–ë—é–¥–∂–µ—Ç?");
            case BUDGET:
                s.budget = raw;
                s.step = Step.DONE;
                return new Response(chatId, "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n" + humanSummary(s));
            case DONE:
            default:
                return new Response(chatId,
                        "–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: " + humanSummary(s)
                                + "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏–ª–∏ /summary –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.");

        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.
     */
    private String humanSummary(Session s) {
        String who = s.who == null ? "‚Äî" : s.who;
        String occasion = s.occasion == null ? "‚Äî" : s.occasion;
        String age = s.age == null ? "‚Äî" : s.age;
        String interests = s.interests == null ? "‚Äî" : s.interests;
        String budget = s.budget == null ? "‚Äî" : s.budget;

        return String.join("\n",
                "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                "–ö–æ–º—É ‚Äî " + who,
                "–ü–æ–≤–æ–¥ ‚Äî " + occasion,
                "–í–æ–∑—Ä–∞—Å—Ç ‚Äî " + age,
                "–ò–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî " + interests,
                "–ë—é–¥–∂–µ—Ç ‚Äî " + budget + " ‚ÇΩ"
        );
    }
}
