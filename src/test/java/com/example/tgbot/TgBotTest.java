package org.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –∫–ª–∞—Å—Å–∞ GiftFlow.
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
class GiftFlowTest {

    private GiftFlow giftFlow;
    private final long chatId = 12345L;

    @BeforeEach
    void setUp() {
        giftFlow = new GiftFlow();
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. */
    @Test
    void testStartCommand() {
        Response response = giftFlow.handle(chatId, "/start");

        String expected = String.join("\n",
                "–ü—Ä–∏–≤–µ—Ç! üéÅ",
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –≤—Å–µ–≥–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.",
                "",
                "–Ø –∑–∞–¥–∞–º –ø–∞—Ä—É –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:",
                "1Ô∏è‚É£ –ö–æ–º—É —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫",
                "2Ô∏è‚É£ –ü–æ–≤–æ–¥",
                "3Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –±—é–¥–∂–µ—Ç",
                "",
                "–ê –ø–æ—Ç–æ–º –ø–æ–∫–∞–∂—É –∏—Ç–æ–≥–æ–≤—É—é –∞–Ω–∫–µ—Ç—É.",
                "",
                "–ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–∞–±–µ—Ä–∏ /help üí°",
                "",
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî —Å–∫–∞–∂–∏, –∫–æ–º—É –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫?"
        );

        assertEquals(expected, response.getText());
        assertEquals(chatId, response.getChatId());
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /help –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. */
    @Test
    void testHelpCommand() {
        Response response = giftFlow.handle(chatId, "/help");

        String expected = String.join("\n",
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                "/start ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞",
                "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É",
                "/summary ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        );

        assertEquals(expected, response.getText());
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. */
    @Test
    void testResetCommand() {
        giftFlow.handle(chatId, "/start");
        giftFlow.handle(chatId, "–ú–∞–º–µ");

        Response response = giftFlow.handle(chatId, "/reset");

        assertEquals("–ê–Ω–∫–µ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ö–æ–º—É –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫?", response.getText());
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. */
    @Test
    void testFullSurveyFlow() {
        giftFlow.handle(chatId, "/start");

        Response r1 = giftFlow.handle(chatId, "–ú–∞–º–µ");
        assertEquals("–ü–æ–≤–æ–¥?", r1.getText());

        Response r2 = giftFlow.handle(chatId, "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è");
        assertEquals("–í–æ–∑—Ä–∞—Å—Ç?", r2.getText());

        Response r3 = giftFlow.handle(chatId, "45");
        assertEquals("–ò–Ω—Ç–µ—Ä–µ—Å—ã?", r3.getText());

        Response r4 = giftFlow.handle(chatId, "–ö—É–ª–∏–Ω–∞—Ä–∏—è");
        assertEquals("–ë—é–¥–∂–µ—Ç?", r4.getText());

        Response r5 = giftFlow.handle(chatId, "5000");

        String expected = String.join("\n",
                "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                "",
                "üéÅ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                "–ö–æ–º—É ‚Äî –ú–∞–º–µ",
                "–ü–æ–≤–æ–¥ ‚Äî –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                "–í–æ–∑—Ä–∞—Å—Ç ‚Äî 45",
                "–ò–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî –ö—É–ª–∏–Ω–∞—Ä–∏—è",
                "–ë—é–¥–∂–µ—Ç ‚Äî 5000 ‚ÇΩ"
        );

        assertEquals(expected, r5.getText());
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /summary –≤—ã–≤–æ–¥–∏—Ç –∞–Ω–∫–µ—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. */
    @Test
    void testSummaryCommandAfterCompletion() {
        giftFlow.handle(chatId, "/start");
        giftFlow.handle(chatId, "–ú–∞–º–µ");
        giftFlow.handle(chatId, "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è");
        giftFlow.handle(chatId, "45");
        giftFlow.handle(chatId, "–ö—É–ª–∏–Ω–∞—Ä–∏—è");
        giftFlow.handle(chatId, "5000");

        Response summary = giftFlow.handle(chatId, "/summary");

        String expected = "–ê–Ω–∫–µ—Ç–∞: \n" + String.join("\n",
                "üéÅ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                "–ö–æ–º—É ‚Äî –ú–∞–º–µ",
                "–ü–æ–≤–æ–¥ ‚Äî –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                "–í–æ–∑—Ä–∞—Å—Ç ‚Äî 45",
                "–ò–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî –ö—É–ª–∏–Ω–∞—Ä–∏—è",
                "–ë—é–¥–∂–µ—Ç ‚Äî 5000 ‚ÇΩ"
        );

        assertEquals(expected, summary.getText());
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–π –≤–≤–æ–¥ –≤–Ω–µ –∞–Ω–∫–µ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. */
    @Test
    void testRandomMessageIgnored() {
        Response response = giftFlow.handle(chatId, "–ü—Ä–∏–≤–µ—Ç");

        String expected = String.join("\n",
                "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üôÇ",
                "–ù–∞–±–µ—Ä–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞, –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        );

        assertEquals(expected, response.getText());
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ –≤–≤–æ–¥ –Ω–µ –º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ. */
    @Test
    void testMessageAfterDone() {
        giftFlow.handle(chatId, "/start");
        giftFlow.handle(chatId, "–ú–∞–º–µ");
        giftFlow.handle(chatId, "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è");
        giftFlow.handle(chatId, "45");
        giftFlow.handle(chatId, "–ö—É–ª–∏–Ω–∞—Ä–∏—è");
        giftFlow.handle(chatId, "5000");

        Response response = giftFlow.handle(chatId, "–µ—â—ë —Ç–µ–∫—Å—Ç");

        String expected = String.join("\n",
                "–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: " + String.join("\n",
                        "üéÅ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                        "–ö–æ–º—É ‚Äî –ú–∞–º–µ",
                        "–ü–æ–≤–æ–¥ ‚Äî –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                        "–í–æ–∑—Ä–∞—Å—Ç ‚Äî 45",
                        "–ò–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî –ö—É–ª–∏–Ω–∞—Ä–∏—è",
                        "–ë—é–¥–∂–µ—Ç ‚Äî 5000 ‚ÇΩ"
                ),
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏–ª–∏ /summary –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        );

        assertEquals(expected, response.getText());
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ null-—Å–æ–æ–±—â–µ–Ω–∏—è. */
    @Test
    void testEmptyOrNullMessage() {
        Response r1 = giftFlow.handle(chatId, null);
        Response r2 = giftFlow.handle(chatId, "   ");

        assertEquals("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", r1.getText());
        assertEquals("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", r2.getText());
    }
}
